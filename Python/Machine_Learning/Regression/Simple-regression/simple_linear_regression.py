# -*- coding: utf-8 -*-
"""simple_linear_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JZcAOhV2XNuSLJW7qLWJVdGHdRv-j3ak

# Simple Linear Regression

Note: This dataset is very simple (only contains 30 observations). It has 2 features, years experience and salary. We want to predict the salary based on the correlation between the 2 features.

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset = pd.read_csv('Salary_Data.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

"""We take the features by selecting all the columns (dependent variables), expect the last one.

## Splitting the dataset into the Training set and Test set
"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

"""*   Training set: Use to train our simple linear regression model.
*   Test set: Use to evaluate it.

## Training the Simple Linear Regression model on the Training set
"""

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

"""1.   Scikit-learn gives us access to linear model, which we use to call Simple Linear Regression class.
2.   Get the model by calling LinearRegression().
3.   fit(independent vairable, dependent variable) uses to train our model

## Predicting the Test set results
"""

y_pred = regressor.predict(X_test)

"""Return a vector contains the predicted salary (y_pred)

## Visualising the Training set results
"""

plt.scatter(X_train, y_train, color = 'green')
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
plt.title('Salary vs Experience (Training set)')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()

"""Notice here, the regression line is calculated so that it comes as closer to the real salary. In other words, our model was actually trained with those obseravations

## Visualising the Test set results
"""

plt.scatter(X_test, y_test, color = 'green')
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
plt.title('Salary vs Experience (Test set)')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()

"""We do not need replace plt.plot(X_train, regressor.predict(X_train), color = 'blue') to the test set, since we will get the result form a unique equation, which means the predicted salaries of the test set will be on the same regression line as the predicted salaries of the training set.

Again, our regression line is still very close to the real salary on the test set.

The reason why this model works: There are the linear correlation between the independent and the dependent variables.
"""